app.controller('MainCtrl', function($rootScope, $scope, $routeParams, $location, $timeout, $q) {
  'use strict';

  var model = $scope.model = {};

  model.picture = {
    position: {}
  };

  model.person = {
    position: {}
  };

  model.details = {
    position: {}
  };

  model.email = {
    position: {}
  };

  model.url = {
    position: {}
  };

  model.cardPictureFile = '';
  model.cardPicture = '';
  model.generatingCard = false;
  model.generatingPdf = false;

  model.imageData = '';
  model.imageFilename = 'bizcardmaker-com.jpg';

  model.pdfData = '';
  model.pdfFilename = 'bizcardmaker-com.pdf';

  var clearInlineStyles = function() {
    // clear all inline styles
    // generated by editor and draggable
    var cardChildren = document.querySelector('.card-preview').querySelectorAll('*');
    angular.forEach(cardChildren, function(c) {
      c.removeAttribute('style');
    });
  };

  clearInlineStyles();

  $scope.$on('$routeUpdate', function(){
    model.activeTheme = parseInt($routeParams.theme, 10) || 0;

    // reset editor and position changes on elements
    clearInlineStyles();

  });

  $scope.$broadcast('$routeUpdate');

  model.themes = [
    {
      name: 'simple-black'
    },
    {
      name: 'simple-white'
    },
    {
      name: 'simple-blue'
    },
    {
      name: 'simple-dark-blue'
    },
    {
      name: 'simple-turquoise'
    },
    {
      name: 'simple-red'
    },
    {
      name: 'black-corners'
    },
    {
      name: 'black-white'
    },
    {
      name: 'diagonals'
    },
    {
      name: 'black-border'
    },
    {
      name: 'line-one'
    },
    {
      name: 'asphalt-half'
    }
  ];

  $scope.$watch('model.cardPictureFile', function() {

    if(model.cardPictureFile) {

      var imageType = /image.*/;

      if (model.cardPictureFile.type.match(imageType)) {
        var reader = new FileReader();

        reader.onload = function() {

          $timeout(function() {
            model.cardPicture = reader.result;
          });

        };

        reader.readAsDataURL(model.cardPictureFile);

      } else {

        window.alert('File not supported!');

      }

    }

  });
  
  /* Turn px values into em
   */
  var pxToEm = function(elem) {
    
    var parentStyle = window.getComputedStyle(elem.parentNode, null);
    var style = window.getComputedStyle(elem, null);
    var childFontSize = parseInt(style.fontSize, 10);
    var parentFontSize = parseInt(parentStyle.fontSize, 10);
    
    if(elem.style.left.indexOf('em') === -1) {
      
      var childLeft = parseInt(style.left, 10);
      var left = Math.floor((childLeft / parentFontSize) * 100) / 100;
      
      left = left * (parentFontSize / childFontSize);
      
      elem.style.left = left + 'em';
      
    }
    
    if(elem.style.top.indexOf('em') === -1) {
      
      var childTop = parseInt(style.top, 10);
      var top = Math.floor((childTop / parentFontSize) * 100) / 100;
      
      top = top * (parentFontSize / childFontSize);
      
      elem.style.top = top + 'em';
      
    }
    
    if(style.fontSize.indexOf('em') === -1) {
      elem.style.fontSize = childFontSize / parentFontSize + 'em';
    }
    
    
  };

  // because the editor uses funky x-small, xx-small, etc. font-sizes
  // I have to replace those with em sizes
  // so that I can later enlarge the entire business card with ems
  var fixPxSizes = function(container) {
    var editors = container.querySelectorAll('[contenteditable]');
    
    var children;
      
    angular.forEach(editors, function(e) {
      children = e.querySelectorAll('*');
      //parentStyle = window.getComputedStyle(e, null);
      angular.forEach(children, function(c) {
        pxToEm(c);
      });
    });

    // fix dragged possitions
    var lists = container.querySelectorAll('.card-item[style]'),
      picture = container.querySelector('.card-picture[style]');

    angular.forEach(lists, function(li) {
      pxToEm(li);
    });

    if(picture) {
      pxToEm(picture);
    }

  };

  // place business card on a canvas
  $scope.generatePicture = function() {

    var deferred = $q.defer();

    var $cardPreview = $('.card-preview').get(0);

    // before generation, turn all px values to em
    // for scaling
    // px generated by drag and editor
    fixPxSizes($cardPreview);

    model.generatingCard = true;

    html2canvas($cardPreview, {
      letterRendering: true,
      onrendered: function(canvas) {

        $timeout(function() {
          model.generatingCard = false;
        });

        deferred.resolve(canvas);

      }
    });

    return deferred.promise;

  };

  $scope.DownloadPdf = function() {

    model.generatingPdf = true;

    $scope.generatePicture().then(function(canvas) {
      model.generatingPdf = false;

      var doc = new jsPDF();

      var imgData = canvas.toDataURL('image/jpeg', 1.0);

      // full bleed size 3.75 x 2.25 (in) / 95.25 x 57.15 (mm)

      var width = 95.25,
        height = 57.15;

      // place images on page
      for(var i = 0; i < 2; i++) {
        for(var j = 0; j < 5; j++) {
          doc.addImage(imgData, 'JPEG', 4 + i * (width + 0.5), 4 + j * (height + 0.5), width, height);
        }
      }

      doc.save(model.pdfFilename);
    });

    // track pdf download
    ga('send', 'event', 'Download', 'Download PDF', model.themes[model.activeTheme].name);


  };

  $scope.DownloadPicture = function() {

    $scope.generatePicture().then(function(canvas) {

      // make the canvas a blob, so we can download it with downloadify
      canvas.toBlob(
        function (blob) {

          // saveAs is global from FileSaver.js
          // FileSaver is included in jsPdf
          saveAs(blob, model.imageFilename);

          // scroll back to the bottom, since saveAs scrolls to the top
          window.scrollTo(0, document.body.scrollHeight - 950);

        },
        'image/jpeg'
      );

    });

    // track analytics
    ga('send', 'event', 'Download', 'Download picture', model.themes[model.activeTheme].name);

  };

  model.openedModal = false;
  model.order = {};
  $scope.CopyCardDetails = function() {

    // if this is the first time we're opening the modal copy the details
    // to be used in the order form.
    // if the modal was previously opened, leave the details alone
    if(!model.openedModal) {

      var $vcard = $('.vcard');
      model.order.email = $('.email p', $vcard).text().trim();
      model.order.name = $('.fn', $vcard).text().trim();
      model.order.phone = $('.tel', $vcard).text().trim();
      model.order.city = $('.locality', $vcard).text().trim();

      model.openedModal = true;
    }

    // track analytics
    ga('send', 'event', 'Orders', 'Begin order');


  };

  $scope.$on('$includeContentLoaded', function() {

    // init foundation plugins
    $(document).foundation();

    // show the print promo in 1s after loading
    $timeout(function() {

      // be safe
      if(window.showPrintpromo) {
        window.showPrintpromo();
      }

    }, 1000);

    // hack to prevent automatic scrolling from contenteditable
    var $cardContent = document.querySelector('.card-content');
    $cardContent.addEventListener('scroll', function(event) {
      $cardContent.scrollTop = 0;
      $cardContent.scrollLeft = 0;
    });

  });

});
